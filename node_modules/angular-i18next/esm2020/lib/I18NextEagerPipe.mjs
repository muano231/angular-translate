import { Inject, Pipe, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE, } from './I18NEXT_TOKENS';
import { I18NextPipe } from './I18NextPipe';
import * as i0 from "@angular/core";
export class I18NextEagerPipe extends I18NextPipe {
    constructor(translateI18Next, ns, scope, cd) {
        super(translateI18Next, ns, scope);
        this.translateI18Next = translateI18Next;
        this.ns = ns;
        this.scope = scope;
        this.cd = cd;
        this.lastValue = '';
        this.ngUnsubscribe = new Subject();
        translateI18Next.events.languageChanged
            .pipe(takeUntil(this.ngUnsubscribe))
            .subscribe(() => {
            this.cd.markForCheck();
        });
    }
    hasKeyChanged(key) {
        return !this.lastKey || this.lastKey !== key;
    }
    hasOptionsChanged(options) {
        return this.lastOptions !== options;
    }
    transform(key, options) {
        const newKey = this.translateI18Next.language + '|' + JSON.stringify(key);
        if (this.hasKeyChanged(newKey) || this.hasOptionsChanged(options)) {
            this.lastKey = newKey;
            this.lastOptions = options;
            this.lastValue = super.transform(key, options);
        }
        return this.lastValue;
    }
    ngOnDestroy() {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    }
}
I18NextEagerPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextEagerPipe, deps: [{ token: I18NEXT_SERVICE }, { token: I18NEXT_NAMESPACE }, { token: I18NEXT_SCOPE }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });
I18NextEagerPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.4", ngImport: i0, type: I18NextEagerPipe, name: "i18nextEager", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextEagerPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'i18nextEager',
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_NAMESPACE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_SCOPE]
                }] }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSTE4TmV4dEVhZ2VyUGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvSTE4TmV4dEVhZ2VyUGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsTUFBTSxFQUVOLElBQUksR0FFTCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLGFBQWEsRUFDYixlQUFlLEdBQ2hCLE1BQU0sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFRNUMsTUFBTSxPQUFPLGdCQUNYLFNBQVEsV0FBVztJQVNuQixZQUM4QyxnQkFBcUMsRUFDbkMsRUFBcUIsRUFDekIsS0FBd0IsRUFDMUQsRUFBcUI7UUFFN0IsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUxTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBcUI7UUFDbkMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDekIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFDMUQsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFSdkIsY0FBUyxHQUFXLEVBQUUsQ0FBQztRQUV2QixrQkFBYSxHQUFrQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBU25ELGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxlQUFlO2FBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ25DLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNPLGFBQWEsQ0FBQyxHQUFzQjtRQUMxQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLEdBQUcsQ0FBQztJQUMvQyxDQUFDO0lBRU8saUJBQWlCLENBQUMsT0FBcUI7UUFDN0MsT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRWUsU0FBUyxDQUFDLEdBQXNCLEVBQUUsT0FBcUI7UUFDckUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxRSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2pFLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1lBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7NkdBN0NVLGdCQUFnQixrQkFXakIsZUFBZSxhQUNmLGlCQUFpQixhQUNqQixhQUFhOzJHQWJaLGdCQUFnQjsyRkFBaEIsZ0JBQWdCO2tCQUo1QixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxjQUFjO29CQUNwQixJQUFJLEVBQUUsS0FBSztpQkFDWjs7MEJBWUksTUFBTTsyQkFBQyxlQUFlOzswQkFDdEIsTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUN4QixNQUFNOzJCQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIEluamVjdCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgUGlwZSxcclxuICBQaXBlVHJhbnNmb3JtLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtcclxuICBJMThORVhUX05BTUVTUEFDRSxcclxuICBJMThORVhUX1NDT1BFLFxyXG4gIEkxOE5FWFRfU0VSVklDRSxcclxufSBmcm9tICcuL0kxOE5FWFRfVE9LRU5TJztcclxuaW1wb3J0IHsgSTE4TmV4dFBpcGUgfSBmcm9tICcuL0kxOE5leHRQaXBlJztcclxuaW1wb3J0IHsgSVRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJy4vSVRyYW5zbGF0aW9uU2VydmljZSc7XHJcbmltcG9ydCB7IFBpcGVPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpMThuZXh0RWFnZXInLFxyXG4gIHB1cmU6IGZhbHNlLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSTE4TmV4dEVhZ2VyUGlwZVxyXG4gIGV4dGVuZHMgSTE4TmV4dFBpcGVcclxuICBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0sIE9uRGVzdHJveVxyXG57XHJcbiAgcHJpdmF0ZSBsYXN0S2V5OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgcHJpdmF0ZSBsYXN0T3B0aW9uczogUGlwZU9wdGlvbnMgfCB1bmRlZmluZWQ7XHJcbiAgcHJpdmF0ZSBsYXN0VmFsdWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICBwcml2YXRlIG5nVW5zdWJzY3JpYmU6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoSTE4TkVYVF9TRVJWSUNFKSBwcm90ZWN0ZWQgb3ZlcnJpZGUgdHJhbnNsYXRlSTE4TmV4dDogSVRyYW5zbGF0aW9uU2VydmljZSxcclxuICAgIEBJbmplY3QoSTE4TkVYVF9OQU1FU1BBQ0UpIHByb3RlY3RlZCBvdmVycmlkZSBuczogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICBASW5qZWN0KEkxOE5FWFRfU0NPUEUpIHByb3RlY3RlZCBvdmVycmlkZSBzY29wZTogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZlxyXG4gICkge1xyXG4gICAgc3VwZXIodHJhbnNsYXRlSTE4TmV4dCwgbnMsIHNjb3BlKTtcclxuICAgIHRyYW5zbGF0ZUkxOE5leHQuZXZlbnRzLmxhbmd1YWdlQ2hhbmdlZFxyXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5uZ1Vuc3Vic2NyaWJlKSlcclxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgaGFzS2V5Q2hhbmdlZChrZXk6IHN0cmluZyB8IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIXRoaXMubGFzdEtleSB8fCB0aGlzLmxhc3RLZXkgIT09IGtleTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFzT3B0aW9uc0NoYW5nZWQob3B0aW9ucz86IFBpcGVPcHRpb25zKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5sYXN0T3B0aW9ucyAhPT0gb3B0aW9ucztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSB0cmFuc2Zvcm0oa2V5OiBzdHJpbmcgfCBzdHJpbmdbXSwgb3B0aW9ucz86IFBpcGVPcHRpb25zKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG5ld0tleSA9IHRoaXMudHJhbnNsYXRlSTE4TmV4dC5sYW5ndWFnZSArICd8JyArIEpTT04uc3RyaW5naWZ5KGtleSk7XHJcblxyXG4gICAgaWYgKHRoaXMuaGFzS2V5Q2hhbmdlZChuZXdLZXkpIHx8IHRoaXMuaGFzT3B0aW9uc0NoYW5nZWQob3B0aW9ucykpIHtcclxuICAgICAgdGhpcy5sYXN0S2V5ID0gbmV3S2V5O1xyXG4gICAgICB0aGlzLmxhc3RPcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgdGhpcy5sYXN0VmFsdWUgPSBzdXBlci50cmFuc2Zvcm0oa2V5LCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmxhc3RWYWx1ZTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5uZ1Vuc3Vic2NyaWJlLm5leHQoKTtcclxuICAgIHRoaXMubmdVbnN1YnNjcmliZS5jb21wbGV0ZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=