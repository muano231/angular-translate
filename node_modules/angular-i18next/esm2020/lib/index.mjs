import { NgModule } from '@angular/core';
import * as i18n from 'i18next';
import { I18NextCapPipe } from './I18NextCapPipe';
import { I18NextEagerPipe } from './I18NextEagerPipe';
import { NativeErrorHandlingStrategy } from './I18NextErrorHandlingStrategies';
import { I18NextFormatPipe } from './I18NextFormatPipe';
import { I18NextPipe } from './I18NextPipe';
import { I18NextService } from './I18NextService';
import { I18NextTitle } from './I18NextTitle';
import { I18NEXT_ERROR_HANDLING_STRATEGY, I18NEXT_NAMESPACE, I18NEXT_NAMESPACE_RESOLVER, I18NEXT_SCOPE, I18NEXT_SERVICE } from './I18NEXT_TOKENS';
import { I18NEXT_INSTANCE } from './I18NEXT_TOKENS';
import * as i0 from "@angular/core";
export * from './I18NextCapPipe';
export * from './I18NextEagerPipe';
export * from './I18NextErrorHandlingStrategies';
export * from './I18NextFormatPipe';
export * from './I18NextLoadResult';
export * from './I18NextModuleParams';
export * from './I18NextPipe';
export * from './I18NextService';
export * from './I18NextTitle';
export * from './I18NEXT_TOKENS';
export * from './ITranslationEvents';
export * from './ITranslationService';
export * from './I18NextEvents';
export * from './models';
export function resolver(activatedRouteSnapshot, routerStateSnapshot) {
    let namespaces = [];
    namespaces =
        (activatedRouteSnapshot.data &&
            activatedRouteSnapshot.data.i18nextNamespaces) ||
            namespaces;
    // @ts-ignore
    return this.loadNamespaces(namespaces.filter((n) => n));
}
export function i18nextNamespaceResolverFactory(i18next) {
    return resolver.bind(i18next);
}
const i18nextGlobal = i18n.default;
export class I18NextModule {
    static forRoot(params = {}) {
        return {
            ngModule: I18NextModule,
            providers: [{
                    provide: I18NEXT_INSTANCE,
                    useValue: i18nextGlobal,
                },
                {
                    provide: I18NEXT_SERVICE,
                    useFactory: (errHandle, i18nextInstance) => new I18NextService(errHandle, i18nextInstance),
                    deps: [
                        I18NEXT_ERROR_HANDLING_STRATEGY,
                        I18NEXT_INSTANCE
                    ]
                },
                {
                    provide: I18NEXT_ERROR_HANDLING_STRATEGY,
                    useClass: params.errorHandlingStrategy || NativeErrorHandlingStrategy,
                },
                I18NextService,
                I18NextPipe,
                I18NextCapPipe,
                I18NextFormatPipe,
                I18NextTitle,
                I18NextEagerPipe,
                {
                    provide: I18NEXT_NAMESPACE_RESOLVER,
                    useFactory: i18nextNamespaceResolverFactory,
                    deps: [I18NEXT_SERVICE],
                },],
        };
    }
    static interpolationFormat(customFormat = null) {
        function formatDelegate(value, format, lng, options) {
            let formatedValue = defaultInterpolationFormat(value, format, lng);
            if (customFormat === null)
                return formatedValue;
            return customFormat(formatedValue, format, lng);
        }
        return formatDelegate;
    }
}
I18NextModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
I18NextModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.4", ngImport: i0, type: I18NextModule, declarations: [I18NextPipe,
        I18NextCapPipe,
        I18NextFormatPipe,
        I18NextEagerPipe], exports: [I18NextPipe, I18NextCapPipe, I18NextFormatPipe, I18NextEagerPipe] });
I18NextModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextModule, providers: [
        {
            provide: I18NEXT_NAMESPACE,
            useValue: '',
        },
        {
            provide: I18NEXT_SCOPE,
            useValue: '',
        },
        I18NextPipe,
        I18NextCapPipe,
        I18NextFormatPipe,
        I18NextTitle,
        I18NextEagerPipe,
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        {
                            provide: I18NEXT_NAMESPACE,
                            useValue: '',
                        },
                        {
                            provide: I18NEXT_SCOPE,
                            useValue: '',
                        },
                        I18NextPipe,
                        I18NextCapPipe,
                        I18NextFormatPipe,
                        I18NextTitle,
                        I18NextEagerPipe,
                    ],
                    declarations: [
                        I18NextPipe,
                        I18NextCapPipe,
                        I18NextFormatPipe,
                        I18NextEagerPipe,
                    ],
                    exports: [I18NextPipe, I18NextCapPipe, I18NextFormatPipe, I18NextEagerPipe],
                }]
        }] });
export function defaultInterpolationFormat(value, format, lng) {
    if (!value)
        return value;
    switch (format) {
        case 'upper':
        case 'uppercase':
            return value.toUpperCase();
        case 'lower':
        case 'lowercase':
            return value.toLowerCase();
        case 'cap':
        case 'capitalize':
            return value.charAt(0).toUpperCase() + value.slice(1);
        case null:
        case undefined:
        case 'none':
        default:
            return value;
    }
}
//# sourceMappingURL=data:application/json;base64,