import { Inject, Injectable, Pipe } from '@angular/core';
import { I18NEXT_SERVICE } from './I18NEXT_TOKENS';
import * as i0 from "@angular/core";
export class I18NextFormatPipe {
    constructor(translateI18Next) {
        this.translateI18Next = translateI18Next;
    }
    transform(value, options) {
        let opts = typeof options === 'string' ? { format: options } : options;
        return this.translateI18Next.format(value, opts.format, opts.lng);
    }
}
I18NextFormatPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextFormatPipe, deps: [{ token: I18NEXT_SERVICE }], target: i0.ɵɵFactoryTarget.Pipe });
I18NextFormatPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.4", ngImport: i0, type: I18NextFormatPipe, name: "i18nextFormat" });
I18NextFormatPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextFormatPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: I18NextFormatPipe, decorators: [{
            type: Injectable
        }, {
            type: Pipe,
            args: [{
                    name: 'i18nextFormat',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [I18NEXT_SERVICE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSTE4TmV4dEZvcm1hdFBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL0kxOE5leHRGb3JtYXRQaXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQVFuRCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQ21DLGdCQUFxQztRQUFyQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXFCO0lBQ3JFLENBQUM7SUFFRyxTQUFTLENBQUMsS0FBVSxFQUFFLE9BQW1DO1FBQzlELElBQUksSUFBSSxHQUNOLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUM5RCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7OzhHQVRVLGlCQUFpQixrQkFFbEIsZUFBZTs0R0FGZCxpQkFBaUI7a0hBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUo3QixVQUFVOztrQkFDVixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxlQUFlO2lCQUN0Qjs7MEJBR0ksTUFBTTsyQkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBJMThORVhUX1NFUlZJQ0UgfSBmcm9tICcuL0kxOE5FWFRfVE9LRU5TJztcclxuaW1wb3J0IHsgSVRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJy4vSVRyYW5zbGF0aW9uU2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1hdFBpcGVPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2kxOG5leHRGb3JtYXQnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSTE4TmV4dEZvcm1hdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoSTE4TkVYVF9TRVJWSUNFKSBwcml2YXRlIHRyYW5zbGF0ZUkxOE5leHQ6IElUcmFuc2xhdGlvblNlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIHB1YmxpYyB0cmFuc2Zvcm0odmFsdWU6IGFueSwgb3B0aW9uczogRm9ybWF0UGlwZU9wdGlvbnMgfCBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgbGV0IG9wdHM6IEZvcm1hdFBpcGVPcHRpb25zID1cclxuICAgICAgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnID8geyBmb3JtYXQ6IG9wdGlvbnMgfSA6IG9wdGlvbnM7XHJcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVJMThOZXh0LmZvcm1hdCh2YWx1ZSwgb3B0cy5mb3JtYXQsIG9wdHMubG5nKTtcclxuICB9XHJcbn1cclxuIl19